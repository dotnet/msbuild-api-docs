<Type Name="BuildEventArgsReader" FullName="Microsoft.Build.Logging.BuildEventArgsReader">
  <TypeSignature Language="C#" Value="public class BuildEventArgsReader : IDisposable" FrameworkAlternate="msbuild-16;msbuild-16-netcore" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi beforefieldinit BuildEventArgsReader extends System.Object implements class System.IDisposable" FrameworkAlternate="msbuild-16;msbuild-16-netcore" />
  <TypeSignature Language="DocId" Value="T:Microsoft.Build.Logging.BuildEventArgsReader" />
  <TypeSignature Language="VB.NET" Value="Public Class BuildEventArgsReader&#xA;Implements IDisposable" FrameworkAlternate="msbuild-16;msbuild-16-netcore" />
  <TypeSignature Language="F#" Value="type BuildEventArgsReader = class&#xA;    interface IDisposable" FrameworkAlternate="msbuild-16;msbuild-16-netcore" />
  <TypeSignature Language="C++ CLI" Value="public ref class BuildEventArgsReader : IDisposable" FrameworkAlternate="msbuild-16;msbuild-16-netcore" />
  <TypeSignature Language="C#" Value="public class BuildEventArgsReader : IDisposable, Microsoft.Build.Logging.IBuildEventArgsReaderNotifications" FrameworkAlternate="msbuild-17;msbuild-17-netcore" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi beforefieldinit BuildEventArgsReader extends System.Object implements class Microsoft.Build.Logging.IBuildEventArgsReaderNotifications, class System.IDisposable" FrameworkAlternate="msbuild-17;msbuild-17-netcore" />
  <TypeSignature Language="VB.NET" Value="Public Class BuildEventArgsReader&#xA;Implements IBuildEventArgsReaderNotifications, IDisposable" FrameworkAlternate="msbuild-17;msbuild-17-netcore" />
  <TypeSignature Language="F#" Value="type BuildEventArgsReader = class&#xA;    interface IBuildEventArgsReaderNotifications&#xA;    interface IDisposable" FrameworkAlternate="msbuild-17;msbuild-17-netcore" />
  <TypeSignature Language="C++ CLI" Value="public ref class BuildEventArgsReader : IDisposable, Microsoft::Build::Logging::IBuildEventArgsReaderNotifications" FrameworkAlternate="msbuild-17;msbuild-17-netcore" />
  <AssemblyInfo>
    <AssemblyName>Microsoft.Build</AssemblyName>
    <AssemblyVersion>15.1.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces>
    <Interface>
      <InterfaceName>System.IDisposable</InterfaceName>
    </Interface>
    <Interface FrameworkAlternate="msbuild-17;msbuild-17-netcore">
      <InterfaceName>Microsoft.Build.Logging.IBuildEventArgsReaderNotifications</InterfaceName>
    </Interface>
  </Interfaces>
  <Attributes>
    <Attribute FrameworkAlternate="msbuild-17-netcore">
      <AttributeName Language="C#">[System.Runtime.CompilerServices.Nullable(0)]</AttributeName>
      <AttributeName Language="F#">[&lt;System.Runtime.CompilerServices.Nullable(0)&gt;]</AttributeName>
    </Attribute>
    <Attribute FrameworkAlternate="msbuild-17-netcore">
      <AttributeName Language="C#">[System.Runtime.CompilerServices.NullableContext(1)]</AttributeName>
      <AttributeName Language="F#">[&lt;System.Runtime.CompilerServices.NullableContext(1)&gt;]</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary>
            Deserializes and returns BuildEventArgs-derived objects from a BinaryReader.
            </summary>
    <remarks>To be added.</remarks>
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public BuildEventArgsReader (System.IO.BinaryReader binaryReader, int fileFormatVersion);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(class System.IO.BinaryReader binaryReader, int32 fileFormatVersion) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Build.Logging.BuildEventArgsReader.#ctor(System.IO.BinaryReader,System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (binaryReader As BinaryReader, fileFormatVersion As Integer)" />
      <MemberSignature Language="F#" Value="new Microsoft.Build.Logging.BuildEventArgsReader : System.IO.BinaryReader * int -&gt; Microsoft.Build.Logging.BuildEventArgsReader" Usage="new Microsoft.Build.Logging.BuildEventArgsReader (binaryReader, fileFormatVersion)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; BuildEventArgsReader(System::IO::BinaryReader ^ binaryReader, int fileFormatVersion);" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Build</AssemblyName>
        <AssemblyVersion>15.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="binaryReader" Type="System.IO.BinaryReader" />
        <Parameter Name="fileFormatVersion" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="binaryReader">The <see cref="T:System.IO.BinaryReader" /> to read <see cref="T:Microsoft.Build.Framework.BuildEventArgs" /> from.</param>
        <param name="fileFormatVersion">The file format version of the log file being read.</param>
        <summary>
            Initializes a new instance of <see cref="T:Microsoft.Build.Logging.BuildEventArgsReader" /> using a <see cref="T:System.IO.BinaryReader" /> instance.
            </summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ArchiveFileEncountered">
      <MemberSignature Language="C#" Value="public event Action&lt;Microsoft.Build.Logging.ArchiveFileEventArgs&gt;? ArchiveFileEncountered;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Action`1&lt;class Microsoft.Build.Logging.ArchiveFileEventArgs&gt; ArchiveFileEncountered" />
      <MemberSignature Language="DocId" Value="E:Microsoft.Build.Logging.BuildEventArgsReader.ArchiveFileEncountered" />
      <MemberSignature Language="VB.NET" Value="Public Event ArchiveFileEncountered As Action(Of ArchiveFileEventArgs) " />
      <MemberSignature Language="F#" Value="member this.ArchiveFileEncountered : Action&lt;Microsoft.Build.Logging.ArchiveFileEventArgs&gt; " Usage="member this.ArchiveFileEncountered : System.Action&lt;Microsoft.Build.Logging.ArchiveFileEventArgs&gt; " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual event Action&lt;Microsoft::Build::Logging::ArchiveFileEventArgs ^&gt; ^ ArchiveFileEncountered;" />
      <MemberType>Event</MemberType>
      <Implements>
        <InterfaceMember>E:Microsoft.Build.Logging.IBuildEventArgsReaderNotifications.ArchiveFileEncountered</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Build</AssemblyName>
        <AssemblyVersion>15.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="msbuild-17-netcore">
          <AttributeName Language="C#">[System.Runtime.CompilerServices.Nullable(new System.Byte[] { 2, 1 })]</AttributeName>
          <AttributeName Language="F#">[&lt;System.Runtime.CompilerServices.Nullable(new System.Byte[] { 2, 1 })&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Action&lt;Microsoft.Build.Logging.ArchiveFileEventArgs&gt;</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>To be added.</summary>
        <remarks>To be added.</remarks>
        <inheritdoc cref="E:Microsoft.Build.Logging.IBuildEventArgsReaderNotifications.ArchiveFileEncountered" />
      </Docs>
    </Member>
    <Member MemberName="CloseInput">
      <MemberSignature Language="C#" Value="public bool CloseInput { set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool CloseInput" />
      <MemberSignature Language="DocId" Value="P:Microsoft.Build.Logging.BuildEventArgsReader.CloseInput" />
      <MemberSignature Language="VB.NET" Value="Public Property CloseInput As Boolean" />
      <MemberSignature Language="F#" Value="member this.CloseInput : bool" Usage="Microsoft.Build.Logging.BuildEventArgsReader.CloseInput" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool CloseInput {  void set(bool value); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Build</AssemblyName>
        <AssemblyVersion>15.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
            Directs whether the passed <see cref="T:System.IO.BinaryReader" /> should be closed when this instance is disposed.
            Defaults to "false".
            </summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Dispose">
      <MemberSignature Language="C#" Value="public void Dispose ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void Dispose() cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Build.Logging.BuildEventArgsReader.Dispose" />
      <MemberSignature Language="VB.NET" Value="Public Sub Dispose ()" />
      <MemberSignature Language="F#" Value="abstract member Dispose : unit -&gt; unit&#xA;override this.Dispose : unit -&gt; unit" Usage="buildEventArgsReader.Dispose " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void Dispose();" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.IDisposable.Dispose</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Build</AssemblyName>
        <AssemblyVersion>15.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Performs application-defined tasks associated with freeing, releasing, or resetting unmanaged resources.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Read">
      <MemberSignature Language="C#" Value="public Microsoft.Build.Framework.BuildEventArgs Read ();" FrameworkAlternate="msbuild-16;msbuild-16-netcore" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class Microsoft.Build.Framework.BuildEventArgs Read() cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Build.Logging.BuildEventArgsReader.Read" />
      <MemberSignature Language="VB.NET" Value="Public Function Read () As BuildEventArgs" />
      <MemberSignature Language="F#" Value="member this.Read : unit -&gt; Microsoft.Build.Framework.BuildEventArgs" Usage="buildEventArgsReader.Read " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; Microsoft::Build::Framework::BuildEventArgs ^ Read();" />
      <MemberSignature Language="C#" Value="public Microsoft.Build.Framework.BuildEventArgs? Read ();" FrameworkAlternate="msbuild-17;msbuild-17-netcore" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Build</AssemblyName>
        <AssemblyVersion>15.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="msbuild-17-netcore">
          <AttributeName Language="C#">[System.Runtime.CompilerServices.NullableContext(2)]</AttributeName>
          <AttributeName Language="F#">[&lt;System.Runtime.CompilerServices.NullableContext(2)&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>Microsoft.Build.Framework.BuildEventArgs</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
            Reads the next log record from the <see cref="T:System.IO.BinaryReader" />.
            </summary>
        <returns>
            The next <see cref="T:Microsoft.Build.Framework.BuildEventArgs" />.
            If there are no more records, returns <see langword="null" />.
            </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="RecoverableReadError">
      <MemberSignature Language="C#" Value="public event Action&lt;Microsoft.Build.Logging.BinaryLogReaderErrorEventArgs&gt;? RecoverableReadError;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Action`1&lt;class Microsoft.Build.Logging.BinaryLogReaderErrorEventArgs&gt; RecoverableReadError" />
      <MemberSignature Language="DocId" Value="E:Microsoft.Build.Logging.BuildEventArgsReader.RecoverableReadError" />
      <MemberSignature Language="VB.NET" Value="Public Event RecoverableReadError As Action(Of BinaryLogReaderErrorEventArgs) " />
      <MemberSignature Language="F#" Value="member this.RecoverableReadError : Action&lt;Microsoft.Build.Logging.BinaryLogReaderErrorEventArgs&gt; " Usage="member this.RecoverableReadError : System.Action&lt;Microsoft.Build.Logging.BinaryLogReaderErrorEventArgs&gt; " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual event Action&lt;Microsoft::Build::Logging::BinaryLogReaderErrorEventArgs ^&gt; ^ RecoverableReadError;" />
      <MemberType>Event</MemberType>
      <Implements>
        <InterfaceMember>E:Microsoft.Build.Logging.IBuildEventArgsReaderNotifications.RecoverableReadError</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Build</AssemblyName>
        <AssemblyVersion>15.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="msbuild-17-netcore">
          <AttributeName Language="C#">[System.Runtime.CompilerServices.Nullable(new System.Byte[] { 2, 1 })]</AttributeName>
          <AttributeName Language="F#">[&lt;System.Runtime.CompilerServices.Nullable(new System.Byte[] { 2, 1 })&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Action&lt;Microsoft.Build.Logging.BinaryLogReaderErrorEventArgs&gt;</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
            Receives recoverable errors during reading. See <see cref="E:Microsoft.Build.Logging.IBuildEventArgsReaderNotifications.RecoverableReadError" /> for documentation on arguments.
            Applicable mainly when <see cref="P:Microsoft.Build.Logging.BuildEventArgsReader.SkipUnknownEvents" /> or <see cref="P:Microsoft.Build.Logging.BuildEventArgsReader.SkipUnknownEventParts" /> is set to true."/&gt;
            </summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="SkipUnknownEventParts">
      <MemberSignature Language="C#" Value="public bool SkipUnknownEventParts { set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool SkipUnknownEventParts" />
      <MemberSignature Language="DocId" Value="P:Microsoft.Build.Logging.BuildEventArgsReader.SkipUnknownEventParts" />
      <MemberSignature Language="VB.NET" Value="Public Property SkipUnknownEventParts As Boolean" />
      <MemberSignature Language="F#" Value="member this.SkipUnknownEventParts : bool" Usage="Microsoft.Build.Logging.BuildEventArgsReader.SkipUnknownEventParts" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool SkipUnknownEventParts {  void set(bool value); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Build</AssemblyName>
        <AssemblyVersion>15.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
            Indicates whether unread parts of BuildEvents (probably added in newer format of particular BuildEvent)should be silently skipped. Exception thrown otherwise.
            Parameter is supported only if the file format supports forward compatible reading (version is 18 or higher).
            </summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="SkipUnknownEvents">
      <MemberSignature Language="C#" Value="public bool SkipUnknownEvents { set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool SkipUnknownEvents" />
      <MemberSignature Language="DocId" Value="P:Microsoft.Build.Logging.BuildEventArgsReader.SkipUnknownEvents" />
      <MemberSignature Language="VB.NET" Value="Public Property SkipUnknownEvents As Boolean" />
      <MemberSignature Language="F#" Value="member this.SkipUnknownEvents : bool" Usage="Microsoft.Build.Logging.BuildEventArgsReader.SkipUnknownEvents" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool SkipUnknownEvents {  void set(bool value); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Build</AssemblyName>
        <AssemblyVersion>15.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
            Indicates whether unknown BuildEvents should be silently skipped. Read returns null otherwise.
            Parameter is supported only if the file format supports forward compatible reading (version is 18 or higher).
            </summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="StringReadDone">
      <MemberSignature Language="C#" Value="public event Action&lt;Microsoft.Build.Logging.StringReadEventArgs&gt;? StringReadDone;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Action`1&lt;class Microsoft.Build.Logging.StringReadEventArgs&gt; StringReadDone" />
      <MemberSignature Language="DocId" Value="E:Microsoft.Build.Logging.BuildEventArgsReader.StringReadDone" />
      <MemberSignature Language="VB.NET" Value="Public Event StringReadDone As Action(Of StringReadEventArgs) " />
      <MemberSignature Language="F#" Value="member this.StringReadDone : Action&lt;Microsoft.Build.Logging.StringReadEventArgs&gt; " Usage="member this.StringReadDone : System.Action&lt;Microsoft.Build.Logging.StringReadEventArgs&gt; " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual event Action&lt;Microsoft::Build::Logging::StringReadEventArgs ^&gt; ^ StringReadDone;" />
      <MemberType>Event</MemberType>
      <Implements>
        <InterfaceMember>E:Microsoft.Build.Logging.IBuildEventArgsReaderNotifications.StringReadDone</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Build</AssemblyName>
        <AssemblyVersion>15.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="msbuild-17-netcore">
          <AttributeName Language="C#">[System.Runtime.CompilerServices.Nullable(new System.Byte[] { 2, 1 })]</AttributeName>
          <AttributeName Language="F#">[&lt;System.Runtime.CompilerServices.Nullable(new System.Byte[] { 2, 1 })&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Action&lt;Microsoft.Build.Logging.StringReadEventArgs&gt;</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
            An event that allows the subscriber to be notified when a string is read from the binary log.
            Subscriber may adjust the string by setting <see cref="P:Microsoft.Build.Logging.StringReadEventArgs.StringToBeUsed" /> property.
            The passed event arg can be reused and should not be stored.
            </summary>
        <remarks>To be added.</remarks>
        <inheritdoc cref="E:Microsoft.Build.Logging.IBuildEventArgsReaderNotifications.StringReadDone" />
      </Docs>
    </Member>
  </Members>
</Type>
