<Type Name="EvaluatedItemsCheckData" FullName="Microsoft.Build.Experimental.BuildCheck.EvaluatedItemsCheckData">
  <TypeSignature Language="C#" Value="public sealed class EvaluatedItemsCheckData : Microsoft.Build.Experimental.BuildCheck.CheckData" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi sealed beforefieldinit EvaluatedItemsCheckData extends Microsoft.Build.Experimental.BuildCheck.CheckData" />
  <TypeSignature Language="DocId" Value="T:Microsoft.Build.Experimental.BuildCheck.EvaluatedItemsCheckData" />
  <TypeSignature Language="VB.NET" Value="Public NotInheritable Class EvaluatedItemsCheckData&#xA;Inherits CheckData" />
  <TypeSignature Language="F#" Value="type EvaluatedItemsCheckData = class&#xA;    inherit CheckData" />
  <TypeSignature Language="C++ CLI" Value="public ref class EvaluatedItemsCheckData sealed : Microsoft::Build::Experimental::BuildCheck::CheckData" />
  <AssemblyInfo>
    <AssemblyName>Microsoft.Build</AssemblyName>
    <AssemblyVersion>15.1.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>Microsoft.Build.Experimental.BuildCheck.CheckData</BaseTypeName>
  </Base>
  <Interfaces />
  <Attributes>
    <Attribute FrameworkAlternate="msbuild-17-netcore">
      <AttributeName Language="C#">[System.Runtime.CompilerServices.Nullable(0)]</AttributeName>
      <AttributeName Language="F#">[&lt;System.Runtime.CompilerServices.Nullable(0)&gt;]</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary>
            BuildCheck OM data representing the evaluated items of a project.
            </summary>
    <remarks>To be added.</remarks>
  </Docs>
  <Members>
    <Member MemberName="EnumerateItemsOfType">
      <MemberSignature Language="C#" Value="public System.Collections.Generic.IEnumerable&lt;Microsoft.Build.Framework.ItemData&gt; EnumerateItemsOfType (string typeName);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Collections.Generic.IEnumerable`1&lt;valuetype Microsoft.Build.Framework.ItemData&gt; EnumerateItemsOfType(string typeName) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Build.Experimental.BuildCheck.EvaluatedItemsCheckData.EnumerateItemsOfType(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Function EnumerateItemsOfType (typeName As String) As IEnumerable(Of ItemData)" />
      <MemberSignature Language="F#" Value="member this.EnumerateItemsOfType : string -&gt; seq&lt;Microsoft.Build.Framework.ItemData&gt;" Usage="evaluatedItemsCheckData.EnumerateItemsOfType typeName" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Collections::Generic::IEnumerable&lt;Microsoft::Build::Framework::ItemData&gt; ^ EnumerateItemsOfType(System::String ^ typeName);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Build</AssemblyName>
        <AssemblyVersion>15.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.Generic.IEnumerable&lt;Microsoft.Build.Framework.ItemData&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="typeName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="typeName">To be added.</param>
        <summary>
            Lazy enumerates evaluated items for a current project. Only items with matching type will be returned (case-insensitive, MSBuild valid names only).
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="EnumerateItemsOfTypes">
      <MemberSignature Language="C#" Value="public System.Collections.Generic.IEnumerable&lt;Microsoft.Build.Framework.ItemData&gt; EnumerateItemsOfTypes (string[] typeNames);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Collections.Generic.IEnumerable`1&lt;valuetype Microsoft.Build.Framework.ItemData&gt; EnumerateItemsOfTypes(string[] typeNames) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Build.Experimental.BuildCheck.EvaluatedItemsCheckData.EnumerateItemsOfTypes(System.String[])" />
      <MemberSignature Language="VB.NET" Value="Public Function EnumerateItemsOfTypes (typeNames As String()) As IEnumerable(Of ItemData)" />
      <MemberSignature Language="F#" Value="member this.EnumerateItemsOfTypes : string[] -&gt; seq&lt;Microsoft.Build.Framework.ItemData&gt;" Usage="evaluatedItemsCheckData.EnumerateItemsOfTypes typeNames" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Collections::Generic::IEnumerable&lt;Microsoft::Build::Framework::ItemData&gt; ^ EnumerateItemsOfTypes(cli::array &lt;System::String ^&gt; ^ typeNames);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Build</AssemblyName>
        <AssemblyVersion>15.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.Generic.IEnumerable&lt;Microsoft.Build.Framework.ItemData&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="typeNames" Type="System.String[]" />
      </Parameters>
      <Docs>
        <param name="typeNames">To be added.</param>
        <summary>
            Lazy enumerates evaluated items for a current project. Only items with matching type will be returned (case-insensitive, MSBuild valid names only, matching any type from the given list).
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="EvaluatedItems">
      <MemberSignature Language="C#" Value="public System.Collections.Generic.IEnumerable&lt;Microsoft.Build.Framework.ItemData&gt; EvaluatedItems { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Collections.Generic.IEnumerable`1&lt;valuetype Microsoft.Build.Framework.ItemData&gt; EvaluatedItems" />
      <MemberSignature Language="DocId" Value="P:Microsoft.Build.Experimental.BuildCheck.EvaluatedItemsCheckData.EvaluatedItems" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property EvaluatedItems As IEnumerable(Of ItemData)" />
      <MemberSignature Language="F#" Value="member this.EvaluatedItems : seq&lt;Microsoft.Build.Framework.ItemData&gt;" Usage="Microsoft.Build.Experimental.BuildCheck.EvaluatedItemsCheckData.EvaluatedItems" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Collections::Generic::IEnumerable&lt;Microsoft::Build::Framework::ItemData&gt; ^ EvaluatedItems { System::Collections::Generic::IEnumerable&lt;Microsoft::Build::Framework::ItemData&gt; ^ get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Build</AssemblyName>
        <AssemblyVersion>15.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.Generic.IEnumerable&lt;Microsoft.Build.Framework.ItemData&gt;</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
            Lazy enumerates evaluated items for a current project.
            </summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
  </Members>
</Type>
